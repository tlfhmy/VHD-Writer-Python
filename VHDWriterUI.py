# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/Users/tanglin/Gitea_Projects/VHDWriter/VHDWriterUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import json
import struct
from datetime import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(856, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.vhdPathCombo = QtWidgets.QComboBox(self.centralwidget)
        self.vhdPathCombo.setObjectName("vhdPathCombo")
        self.gridLayout.addWidget(self.vhdPathCombo, 0, 1, 1, 9)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.statusLabel = QtWidgets.QLabel(self.centralwidget)
        self.statusLabel.setObjectName("statusLabel")
        self.verticalLayout.addWidget(self.statusLabel)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.gridLayout.addLayout(self.verticalLayout, 5, 0, 1, 1)
        self.dataPathLabel = QtWidgets.QLabel(self.centralwidget)
        self.dataPathLabel.setObjectName("dataPathLabel")
        self.gridLayout.addWidget(self.dataPathLabel, 3, 0, 1, 1)
        self.vhdPathLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.vhdPathLabel.setFont(font)
        self.vhdPathLabel.setObjectName("vhdPathLabel")
        self.gridLayout.addWidget(self.vhdPathLabel, 0, 0, 1, 1)
        self.writeButton = QtWidgets.QPushButton(self.centralwidget)
        self.writeButton.setObjectName("writeButton")
        self.gridLayout.addWidget(self.writeButton, 6, 1, 1, 9)
        self.vhdOpenButton = QtWidgets.QPushButton(self.centralwidget)
        self.vhdOpenButton.setObjectName("vhdOpenButton")
        self.gridLayout.addWidget(self.vhdOpenButton, 0, 10, 1, 1)
        self.LBABox = QtWidgets.QSpinBox(self.centralwidget)
        self.LBABox.setMaximum(99999999)
        self.LBABox.setProperty("value", 0)
        self.LBABox.setObjectName("LBABox")
        self.gridLayout.addWidget(self.LBABox, 3, 10, 1, 1)
        self.dataOpenButton = QtWidgets.QPushButton(self.centralwidget)
        self.dataOpenButton.setObjectName("dataOpenButton")
        self.gridLayout.addWidget(self.dataOpenButton, 3, 7, 1, 1)
        self.dataPathCombo = QtWidgets.QComboBox(self.centralwidget)
        self.dataPathCombo.setObjectName("dataPathCombo")
        self.gridLayout.addWidget(self.dataPathCombo, 3, 1, 1, 6)
        self.LBASetLable = QtWidgets.QLabel(self.centralwidget)
        self.LBASetLable.setObjectName("LBASetLable")
        self.gridLayout.addWidget(self.LBASetLable, 3, 9, 1, 1)
        self.vhdInfoBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.vhdInfoBrowser.setObjectName("vhdInfoBrowser")
        self.gridLayout.addWidget(self.vhdInfoBrowser, 2, 1, 1, 9)
        self.statusBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.statusBrowser.setObjectName("statusBrowser")
        self.gridLayout.addWidget(self.statusBrowser, 5, 1, 1, 9)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 856, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.VHDPaths = []
        self.DataPaths = []

        self.setSlots()
        self.initCombosItems()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.statusLabel.setText(_translate("MainWindow", "状态:"))
        self.dataPathLabel.setText(_translate("MainWindow", "数据文件:"))
        self.vhdPathLabel.setText(_translate("MainWindow", "虚拟硬盘文件:"))
        self.writeButton.setText(_translate("MainWindow", "写入"))
        self.vhdOpenButton.setText(_translate("MainWindow", "打开"))
        self.dataOpenButton.setText(_translate("MainWindow", "打开"))
        self.LBASetLable.setText(_translate("MainWindow", "起始LBA扇区号："))

    def openFile(self, ind):
        if ind == 1:
            openFileName = QFileDialog.getOpenFileName(self.MainWindow, '选择文件', '', 'VHD files(*.vhd)')
            fileName = openFileName[0]
            if fileName in self.VHDPaths:
                self.vhdPathCombo.setCurrentText(fileName)
            elif fileName != "":
                self.vhdPathCombo.addItem(fileName)
                self.VHDPaths.append(fileName)
                his_dict = json.dumps({"VHDPaths": self.VHDPaths, "DataPaths": self.DataPaths})
                with open("./history.ini", "w") as f:
                    f.write(his_dict)

        elif ind == 2:
            openFileName = QFileDialog.getOpenFileName(self.MainWindow, '选择文件', '', 'Bin files(*.bin)')
            fileName = openFileName[0]
            if fileName in self.DataPaths:
                self.dataPathCombo.setCurrentText(fileName)
            elif fileName != "":
                self.dataPathCombo.addItem(fileName)
                self.DataPaths.append(fileName)
                his_dict = json.dumps({"VHDPaths": self.VHDPaths, "DataPaths": self.DataPaths})
                with open("./history.ini", "w") as f:
                    f.write(his_dict)

    def writeBin(self):
        self.statusBrowser.clear()
        self.statusBrowser.append("打开虚拟磁盘文件......")
        self.statusBrowser.update()
        vhd_bytes = bytearray(self.getBinBytes(self.vhdPathCombo.currentText()))

        self.statusBrowser.append("虚拟磁盘文件打开成功，获取虚拟磁盘信息......")
        vhd_info_dict = self.getVhdInfo(vhd_bytes[-512:], self.vhdPathCombo.currentText())
        if vhd_info_dict['creator'] != "conectix":
            self.statusBrowser.setText("vhd文件损坏")
            return
        self.statusBrowser.append("打开数据文件......")
        bin_bytes = self.getBinBytes(self.dataPathCombo.currentText())

        start_sector = self.LBABox.value()
        self.statusBrowser.append(f"准备工作完成，开始写入数据文件{self.dataPathCombo.currentText()}......")

        for i, j in enumerate(range(512*start_sector, 512*start_sector+len(bin_bytes))):
            vhd_bytes[j] = bin_bytes[i]

        with open(self.vhdPathCombo.currentText(), 'wb') as f:
            f.write(vhd_bytes)

        sectors = len(bin_bytes)//512
        if len(bin_bytes) % 512 > 0:
            sectors += 1

        self.statusBrowser.append(f"数据写入完成，本次操作{sectors}个扇区。")


    def setSlots(self):
        self.vhdOpenButton.clicked.connect(lambda: self.openFile(1))
        self.dataOpenButton.clicked.connect(lambda: self.openFile(2))
        self.writeButton.clicked.connect(self.writeBin)

    def initCombosItems(self):
        combos_items = json.load(open("./history.ini"))
        self.VHDPaths = combos_items["VHDPaths"]
        self.DataPaths = combos_items["DataPaths"]

        for ele in self.VHDPaths:
            self.vhdPathCombo.addItem(ele)
        for ele in self.DataPaths:
            self.dataPathCombo.addItem(ele)

    def getVhdInfo(self, tail_vhd: bytes, path: str):
        vhd_info_dic = {
            "creator": "",
            "crt_time": "",
            "type": -1,
            "size": 0,
            "crt_app": 0,
            "crt_ver": 0,
            "crt_os": "",
            "cyls": 0,
            "heads": 0,
            "spt": 0
        }
        a = struct.unpack('>8s', tail_vhd[:8])[0]
        a = a.decode('utf-8')
        timestamp = struct.unpack('>L', tail_vhd[24:28])[0]
        vhd_info_dic["creator"] = a

        dt20 = datetime.strptime("2000-01-01 00:00:00", "%Y-%m-%d %H:%M:%S")
        timestamp += datetime.timestamp(dt20)
        dt = datetime.fromtimestamp(timestamp)
        vhd_info_dic["crt_time"] = str(dt)

        crtr_app = struct.unpack('>4s', tail_vhd[28:32])[0]
        crtr_app = crtr_app.decode('utf-8')
        vhd_info_dic["crt_app"] = crtr_app

        crt_ver = struct.unpack('>L', tail_vhd[32:36])[0]
        crt_ver = str(crt_ver >> 16) + "." + str(crt_ver & 0xff)
        vhd_info_dic["crt_ver"] = crt_ver

        crt_os = struct.unpack('>4s', tail_vhd[36:40])[0]
        crt_os = (crt_os.decode('utf-8')).strip()
        vhd_info_dic["crt_os"] = crt_os

        orig_size = struct.unpack('>Q', tail_vhd[40:48])[0]
        orig_size = orig_size // 1024 // 1024
        vhd_info_dic["size"] = orig_size

        geometry = struct.unpack('>L', tail_vhd[56:60])[0]
        cyls = (geometry >> 16) & 0xffff
        heads = (geometry >> 8) & 0xff
        spt = geometry & 0xff
        vhd_info_dic["cyls"] = cyls
        vhd_info_dic["heads"] = heads
        vhd_info_dic["spt"] = spt

        type_vhd = struct.unpack('>L', tail_vhd[60:64])[0]
        vhd_info_dic["type"] = type_vhd

        cont_text = ""
        cont_text += f"虚拟硬盘：{path}\n"
        cont_text += f"VHD规范的原始创建者标识：{vhd_info_dic['creator']}\n"
        cont_text += f"创建此文件的程序：{vhd_info_dic['crt_app']}\n"
        cont_text += f"创建此文件的程序版本：{vhd_info_dic['crt_ver']}\n"
        cont_text += f"创建此文件的操作系统：{vhd_info_dic['crt_os']}\n"
        cont_text += f"该虚拟磁盘创建于 {vhd_info_dic['crt_time']}\n"
        cont_text += f"{vhd_info_dic['cyls']}个柱面；{vhd_info_dic['heads']}个磁头；每磁道有{vhd_info_dic['spt']}个扇区\n"
        cont_text += f"总容量为 {vhd_info_dic['size']}MB\n"
        if vhd_info_dic['type'] == 2:
            cont_text += "该磁盘为固定磁盘（容量固定，文件大小不变）"
        else:
            cont_text += "该磁盘为动态磁盘（容量固定，文件大小随使用增加）"
        self.vhdInfoBrowser.setText(cont_text)
        return vhd_info_dic

    def getBinBytes(self, path: str):
        with open(path, "rb") as f:
            bin_bytes = f.read()
            return bin_bytes
